" Vim Compat {{{

set nocompatible        " be iMproved
set shell=/bin/bash
set ffs=unix,dos,mac
set t_Co=256
set showcmd

if &term =~ '256color'
  set t_ut=
endif

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

" }}}
" General {{{

set number              " Show line numbers
set wrap
set linebreak           " Break lines at word (requires Wrap lines)
set nolist
set showbreak=+++       " Wrap-broken line prefix
set textwidth=140       " Line wrap (number of cols)
set colorcolumn=120
set showmatch           " Highlight matching brace
set errorbells          " Beep or flash screen on errors
set visualbell          " Use visual bell (no beeping)

set nobackup
set noswapfile
set nowb
set viminfo+=n~/.vim/viminfo

set hlsearch            " Highlight all search results
set smartcase           " Enable smart-case search
set ignorecase          " Always case-insensitive
set incsearch           " Searches for strings incrementally
set magic               " Magic shit, regex

set autoindent          " Auto-indent new lines
set cindent             " Use 'C' style program indenting
set expandtab           " Use spaces instead of tabs
set shiftwidth=4        " Number of auto-indent spaces
set smartindent         " Enable smart-indent
set smarttab            " Enable smart-tabs
set softtabstop=4       " Number of spaces per Tab

set foldenable          " Enable Folds
set foldmethod=syntax   " Depending on Syntax, fold
set foldlevelstart=20   " Only fold after 20 levels on open
set foldnestmax=10      " Nest Folds


set title
set titleold="Terminal"
set titlestring=%F

set bomb
set ttyfast
set binary

" }}}
" Advanced {{{

set autoread            " Auto Reads a file upon change
set ruler               " Show row and column ruler information
set hidden              " Show hidden files in NerdTree and :e
set autowriteall        " Auto-write all file changes
set gcr=a:blinkon0
set modeline
set modelines=10


set undolevels=1000     " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
set mouse=a

set wildchar=<Tab>
set wildmode=longest,list
" make tab completion for files/buffers act like bash
set wildmenu
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let mapleader=","

set scrolloff=10
set sidescrolloff=12
set showcmd             " display incomplete commands
set cmdheight=1
set hid                 " Abandoned buffers become hidden

if has("gui_running")
    set guioptions-=m       " menu bar
    set guioptions-=T       " toolbar
    set guioptions-=r       " scrollbar
    " set guifont=Source\ Code\ Pro\ 8 " Source Code Pro Font
    set guifont=Terminus 8 " Source Code Pro Font
    set linespace=5
    set guiheadroom=0
end

set lazyredraw          " Don't redraw while executing macros

let g:acp_enableAtStartup = 0 " Disable AutoComplPop
let g:php_folding=2     " Fold PHP bitch

let no_buffers_menu=1

" }}}
" Vundle Packages {{{

syntax on
filetype off            " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!

Plugin 'gmarik/Vundle.vim'

Bundle 'flazz/vim-colorschemes'
Bundle 'reedes/vim-colors-pencil'
Bundle 'godlygeek/csapprox'

Bundle 'editorconfig/editorconfig-vim'
Bundle 'scrooloose/nerdtree'
Bundle 'airblade/vim-gitgutter'
Bundle 'tpope/vim-eunuch'
Bundle 'scrooloose/syntastic'
Bundle 'Shougo/neocomplete.vim'
Bundle 'majutsushi/tagbar'
Bundle 'vim-scripts/ZoomWin'
Bundle 'jaxbot/github-issues.vim'

Bundle 'itchyny/vim-gitbranch'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'msanders/snipmate.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'rking/ag.vim'
Bundle 'sheerun/vim-polyglot'

" {{{ C

Bundle 'vim-scripts/c.vim'

" }}}
" {{{ HTML

Bundle 'amirh/HTML-AutoCloseTag'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'gorodinskiy/vim-coloresque'
Bundle 'tpope/vim-haml'

" }}}
" {{{ Ruby
"
Bundle "tpope/vim-rails"
Bundle "tpope/vim-rake"
Bundle "tpope/vim-projectionist"
Bundle "thoughtbot/vim-rspec"

" }}}

" {{{ Go

Bundle 'fatih/vim-go'

" }}}
" {{{ Elixir

Bundle 'elixir-lang/vim-elixir'

" }}}
" {{{ PHP 

Bundle 'rayburgemeestre/phpfolding.vim'
Bundle 'vim-php/tagbar-phpctags.vim'
Bundle 'StanAngeloff/php.vim'
Bundle 'joonty/vdebug.git'
Bundle 'arnaud-lb/vim-php-namespace'

" }}}
" {{{ Docker

Bundle 'ekalinin/Dockerfile.vim'

" }}}

" Go Native Plugin
set runtimepath+=$GOROOT/misc/vim

call vundle#end()            " required
filetype plugin indent on    " required

" }}}
" Colors & Statusline {{{

set background=dark
colorscheme numix

set cursorline
set cursorcolumn

highlight cursorline                cterm=none ctermfg=none ctermbg=black
highlight cursorcolumn              cterm=none ctermfg=none ctermbg=black
highlight statusline                cterm=none ctermfg=white ctermbg=black
highlight signcolumn                cterm=none ctermfg=grey ctermbg=none
highlight colorcolumn               cterm=none ctermfg=none ctermbg=black
highlight BadWhitespace		    ctermbg=red guibg=red

" MiniBufExpl Colors
highlight MBENormal               cterm=none ctermfg=none ctermbg=black guifg=#808080 guibg=fg
highlight MBEChanged              cterm=none ctermfg=none ctermbg=black guifg=#CD5907 guibg=fg
highlight MBEVisibleNormal        cterm=none ctermfg=none ctermbg=black guifg=#5DC2D6 guibg=fg
highlight MBEVisibleChanged       cterm=none ctermfg=none ctermbg=black guifg=#F1266F guibg=fg
highlight MBEVisibleActiveNormal  cterm=none ctermfg=none ctermbg=black guifg=#A6DB29 guibg=fg
highlight MBEVisibleActiveChanged cterm=none ctermfg=none ctermbg=black guifg=#F1266F guibg=fg

set laststatus=2
set statusline=\ %f%m%r%h%w\ %{gitbranch#name()}\ %=%({%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y}%)\ %([%l,%v][%p%%]\ %)

" }}}
" Autogroups {{{

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn

    autocmd InsertLeave * highlight StatusLine cterm=bold ctermfg=white ctermbg=black
    autocmd InsertEnter * highlight StatusLine cterm=bold ctermfg=white ctermbg=darkred

    autocmd BufNewFile,BufRead *.rb,*.rbw,*.gemspec set filetype=ruby

    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s

    autocmd FileType css setlocal equalprg=csstidy\ -\ --silent=true\ --preserve_css=true
    autocmd FileType mail setlocal spell

    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2

    autocmd BufEnter *.php colorscheme flatlandia
    autocmd BufEnter *.php setlocal foldmethod=manual
    autocmd BufEnter *.php :EnableFastPHPFolds

    autocmd BufEnter *.go colorscheme flatlandia
    autocmd BufEnter *.js colorscheme grb256
augroup END

augroup vimrc
    au BufReadPre * setlocal foldmethod=marker
    au BufWinEnter * if &fdm == 'syntax' | setlocal foldmethod=marker | endif
    au BufReadPre * setlocal foldlevel=0
augroup END

" }}}
" Custom Functions {{{

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
    let l:modeline = printf("vim: set ft=%s ts=%d sw=%d tw=%d fdm=%s foldlevel=%d %set :",
                \ &filetype, &tabstop, &shiftwidth, &textwidth, &expandtab, &foldmethod, &fdl ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

function! BufSel(pattern)
    let bufcount = bufnr("$")
    let currbufnr = 1
    let nummatches = 0
    let firstmatchingbufnr = 0
    while currbufnr <= bufcount
        if(bufexists(currbufnr))
            let currbufname = bufname(currbufnr)
            if(match(currbufname, a:pattern) > -1)
                echo currbufnr . ": ". bufname(currbufnr)
                let nummatches += 1
                let firstmatchingbufnr = currbufnr
            endif
        endif
        let currbufnr = currbufnr + 1
    endwhile
    if(nummatches == 1)
        execute ":buffer ". firstmatchingbufnr
    elseif(nummatches > 1)
        let desiredbufnr = input("Enter buffer number: ")
        if(strlen(desiredbufnr) != 0)
            execute ":buffer ". desiredbufnr
        endif
    else
        echo "No matching buffers"
    endif
endfunction

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

" Bind the BufSel() function to a user-command
command! -nargs=1 Bs :call BufSel("<args>")

" }}}
" Vim Bindings {{{

nmap <leader>p :MBEbp<CR>
nmap <leader>n :MBEbn<CR>
nmap <leader>d :MBEbd<CR>

nnoremap <leader>b :buffers<CR>:buffer<Space>
nnoremap <leader>w :w!<cr>
nnoremap <leader>e :edit $MYVIMRC<cr>
nnoremap <leader>s :source $MYVIMRC<cr>

nnoremap <silent> <space> :exe 'silent! normal! za'.(foldlevel('.')?'':'l')<cr>
nnoremap <silent> <C-w>d :MBEbd<CR>
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j

nnoremap <C-w>w :ZoomWin<CR>

map <leader>ss :setlocal spell!<cr>
map <leader>/ :noh<cr>
map <HOME> ^
map <leader>o <C-p>

map <leader>1 :confirm :b1<CR>
map <leader>2 :confirm :b2<CR>
map <leader>3 :confirm :b3<CR>
map <leader>4 :confirm :b4<CR>
map <leader>5 :confirm :b5<CR>
map <leader>6 :confirm :b6<CR>
map <leader>7 :confirm :b7<CR>
map <leader>8 :confirm :b8<CR>
map <leader>9 :confirm :b9<CR>

"" Git
noremap <Leader>ga :!git add .<CR>
noremap <Leader>gc :!git commit -m '<C-R>="'"<CR>
noremap <Leader>gsh :!git push<CR>
" noremap <Leader>gs :Gstatus<CR>
" noremap <Leader>gb :Gblame<CR>
" noremap <Leader>gd :Gvdiff<CR>
" noremap <Leader>gr :Gremove<CR>

" noremap ,o :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs open<CR><CR>

" }}}
" Plugin bindings and functionality {{{

" NerdTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
map <C-n> :NERDTreeToggle<CR>i

" Syntastic

let g:syntastic_always_populate_loc_list=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_auto_loc_list=1
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open=1
let g:syntastic_echo_current_error=1
let g:syntastic_enable_signs=1

let g:syntastic_php_checkers = ['php', 'phpcs']

" Vim-go
let g:go_bin_path = expand("~/.go/bin")

" Tagbar
let g:tagbar_type_go = {  
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
            \ ],
            \ 'sro' : '.',
            \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
            \ },
            \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
            \ },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }

let g:tagbar_phpctags_memory_limit = '1024M'
let g:tagbar_phpctags_bin="~/.bin/phpctags"
let g:tagbar_type_php  = {
            \ 'ctagstype' : 'php',
            \ 'kinds'     : [
            \ 'i:interfaces',
            \ 'c:classes',
            \ 'd:constant definitions',
            \ 'f:functions',
            \ 'j:javascript functions:1'
            \ ]
            \ }

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

let g:tagbar_autofocus = 1
let g:javascript_enable_domhtmlcss = 1

nmap <F8> :TagbarToggle<CR>

" vim-gitgutter
let g:gitgutter_max_signs = 50  " default value: 500

" NeoComplete

let g:neocomplete#enable_at_startup = 1

" Ctrl-p && Ag

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = {
            \ "dir": '\v[\/]\.(git|hg|svn)$',
            \ "file": '\v\.(exe|so|dll|jpeg|png|gif)'
            \ }
if executable('ag')
    map <leader>f :Ag<Space>
    " Use Ag over Grep
    set grepprg = "ag -i --nogroup\ --nocolor"

    " Use Ag over Ack
    let g:ackprg = 'ag -i --nogroup --nocolor --column'

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag -i %s -l --nocolor -g ""'
endif 

" PHP Ctags
let FILETAG=expand(".git/tags")
if filereadable(FILETAG)
    set tags=.git/tags
endif

" }}}

"vim: set ft=vim ts=8 sw=4 tw=140 fdm=1 foldlevel=0 noet :
