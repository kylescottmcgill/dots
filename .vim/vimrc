set nocompatible        " be iMproved
set shell=/bin/bash
set encoding=utf8
set ffs=unix,dos,mac
set t_Co=256

" General

set number              " Show line numbers
set wrap
set linebreak           " Break lines at word (requires Wrap lines)
set nolist
set showbreak=+++       " Wrap-broken line prefix
set textwidth=140       " Line wrap (number of cols)
set colorcolumn=120
set showmatch           " Highlight matching brace
set spell               " Enable spell-checking
set errorbells          " Beep or flash screen on errors
set visualbell          " Use visual bell (no beeping)

set nobackup
set noswapfile
set nowb
set viminfo+=n~/.vim/viminfo

set hlsearch            " Highlight all search results
set smartcase           " Enable smart-case search
set ignorecase          " Always case-insensitive
set incsearch           " Searches for strings incrementally
set magic               " Magic shit, regex

set autoindent          " Auto-indent new lines
set cindent             " Use 'C' style program indenting
set expandtab           " Use spaces instead of tabs
set shiftwidth=4        " Number of auto-indent spaces
set smartindent         " Enable smart-indent
set smarttab            " Enable smart-tabs
set softtabstop=4       " Number of spaces per Tab
set foldmethod=syntax   " Depending on Syntax, fold
set foldlevelstart=20   " Only fold after 20 levels on open

" Advanced
set autoread            " Auto Reads a file upon change
set ruler               " Show row and column ruler information
set hidden              " Show hidden files in NerdTree and :e
set autowriteall        " Auto-write all file changes

set undolevels=1000     " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
set mouse=a

set wildchar=<Tab>
set wildmode=longest,list
" make tab completion for files/buffers act like bash
set wildmenu
let mapleader=","

set scrolloff=20
set showcmd             " display incomplete commands
set cmdheight=1
set hid                 " Abandoned buffers become hidden

set guioptions-=m       " menu bar
set guioptions-=T       " toolbar
set guioptions-=r       " scrollbar
set guifont=Source\ Code\ Pro\ 8 " Source Code Pro Font

set linespace=5
set guiheadroom=0

set lazyredraw          " Don't redraw while executing macros

let g:acp_enableAtStartup = 0 " Disable AutoComplPop
let g:php_folding=2     " Fold PHP bitch

syntax on
filetype off            " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
Bundle 'godlygeek/csapprox'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'scrooloose/nerdtree'
Bundle 'airblade/vim-gitgutter'
Bundle 'tpope/vim-eunuch'
Bundle 'scrooloose/syntastic'
Bundle 'fatih/vim-go'
Bundle 'Shougo/neocomplete.vim'
Bundle 'majutsushi/tagbar'
Bundle 'vim-php/tagbar-phpctags.vim'
Bundle 'StanAngeloff/php.vim'
Bundle 'itchyny/vim-gitbranch'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'mattn/webapi-vim'
Bundle 'toritori0318/vim-redmine'
Bundle 'tpope/vim-fugitive'

" Go Native Plugin
set runtimepath+=$GOROOT/misc/vim

filetype plugin indent on     " required!

set background=dark
colorscheme numix

set cursorline
set cursorcolumn

highlight cursorline                cterm=none ctermfg=none ctermbg=black
highlight cursorcolumn              cterm=none ctermfg=none ctermbg=black
highlight statusline                cterm=none ctermfg=white ctermbg=black
highlight signcolumn                cterm=none ctermfg=grey ctermbg=black
highlight colorcolumn               cterm=none ctermfg=none ctermbg=black

" MiniBufExpl Colors
highlight MBENormal               cterm=none ctermfg=none ctermbg=black guifg=#808080 guibg=fg
highlight MBEChanged              cterm=none ctermfg=none ctermbg=black guifg=#CD5907 guibg=fg
highlight MBEVisibleNormal        cterm=none ctermfg=none ctermbg=black guifg=#5DC2D6 guibg=fg
highlight MBEVisibleChanged       cterm=none ctermfg=none ctermbg=black guifg=#F1266F guibg=fg
highlight MBEVisibleActiveNormal  cterm=none ctermfg=none ctermbg=black guifg=#A6DB29 guibg=fg
highlight MBEVisibleActiveChanged cterm=none ctermfg=none ctermbg=black guifg=#F1266F guibg=fg

set laststatus=2
set statusline=\ %f%m%r%h%w\ %{gitbranch#name()}\ %=%({%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y}%)\ %([%l,%v][%p%%]\ %)

au InsertLeave * highlight StatusLine cterm=bold ctermfg=white ctermbg=black
au InsertEnter * highlight StatusLine cterm=bold ctermfg=white ctermbg=darkred

autocmd BufWritePre * :%s/\s\+$//e

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
    let l:modeline = printf("vim: set ft=%s ts=%d sw=%d tw=%d %set :",
                \ &filetype, &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

function! BufSel(pattern)
    let bufcount = bufnr("$")
    let currbufnr = 1
    let nummatches = 0
    let firstmatchingbufnr = 0
    while currbufnr <= bufcount
        if(bufexists(currbufnr))
            let currbufname = bufname(currbufnr)
            if(match(currbufname, a:pattern) > -1)
                echo currbufnr . ": ". bufname(currbufnr)
                let nummatches += 1
                let firstmatchingbufnr = currbufnr
            endif
        endif
        let currbufnr = currbufnr + 1
    endwhile
    if(nummatches == 1)
        execute ":buffer ". firstmatchingbufnr
    elseif(nummatches > 1)
        let desiredbufnr = input("Enter buffer number: ")
        if(strlen(desiredbufnr) != 0)
            execute ":buffer ". desiredbufnr
        endif
    else
        echo "No matching buffers"
    endif
endfunction

" Strip the newline from the end of a string
function! Chomp(str)
    return substitute(a:str, '\n$', '', '')
endfunction

" Find a file and pass it to cmd
function! DmenuOpen(cmd)
    let fname = Chomp(system("git ls-files | dmenu -i -sf '#D64937' -sb '#2D2D2D' -l 10 -q -p " . a:cmd))
    if empty(fname)
        return
    endif
    execute "e " . fname
endfunction

map <leader>o :call DmenuOpen("open")<cr>

"Bind the BufSel() function to a user-command
command! -nargs=1 Bs :call BufSel("<args>")

" Vim Bindings
nmap <leader>p :MBEbp<CR>
nmap <leader>n :MBEbn<CR>
nmap <leader>d :MBEbd<CR>

nnoremap <leader>b :buffers<CR>:buffer<Space>
nnoremap <leader>w :w!<cr>
nnoremap <leader>e :edit $MYVIMRC<cr>
nnoremap <leader>s :source $MYVIMRC<cr>

map <leader>ss :setlocal spell!<cr>
map <leader>/ :noh<cr>

nnoremap <silent> <c-w>d :MBEbd<CR>
nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j

nmap <space> zz

map <leader>1 :confirm :b1<CR>
map <leader>2 :confirm :b2<CR>
map <leader>3 :confirm :b3<CR>
map <leader>4 :confirm :b4<CR>
map <leader>5 :confirm :b5<CR>
map <leader>6 :confirm :b6<CR>
map <leader>7 :confirm :b7<CR>
map <leader>8 :confirm :b8<CR>
map <leader>9 :confirm :b9<CR>


" Plugin bindings and functionality

" NerdTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
map <C-n> :NERDTreeToggle<CR>i

" Syntastic
let g:syntastic_php_checkers = ['php', 'phpcs']
let g:syntastic_check_on_open=0
let g:syntastic_always_populate_loc_list=1

let g:syntastic_echo_current_error=0
let g:syntastic_enable_signs=0

" Vim-go
let g:go_bin_path = expand("~/.go/bin")

" Tagbar
let g:tagbar_phpctags_memory_limit = '1024M'
let g:tagbar_phpctags_bin="~/.composer/vendor/bin/phpctags"
let g:tagbar_type_php  = {
  \ 'ctagstype' : 'php',
  \ 'kinds'     : [
      \ 'i:interfaces',
      \ 'c:classes',
      \ 'd:constant definitions',
      \ 'f:functions',
      \ 'j:javascript functions:1'
  \ ]
\ }
nmap <F8> :TagbarToggle<CR>

" vim-redmine

let g:redmine_auth_site = 'http://redmine.xmdevelopments.com'
let g:redmine_auth_key  = '08a26ffcb5cb6df2651a4cf38eeb4a995d2b32ce'
let g:redmine_author_id = '11'
let g:redmine_project_id = '1'

" NeoComplete

let g:neocomplete#enable_at_startup = 1

"vim: set ft=vim ts=8 sw=4 tw=100 et :
