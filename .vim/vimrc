set nocompatible        " be iMproved
set shell=/bin/bash
set encoding=utf8
set ffs=unix,dos,mac

" General

set number              " Show line numbers
set wrap
set linebreak           " Break lines at word (requires Wrap lines)
set nolist
set showbreak=+++       " Wrap-broken line prefix
set textwidth=140       " Line wrap (number of cols)
set colorcolumn=120
set showmatch           " Highlight matching brace
" set spell off         " Enable spell-checking
set errorbells          " Beep or flash screen on errors
set visualbell          " Use visual bell (no beeping)

set nobackup
set noswapfile
set nowb
set viminfo+=n~/.vim/viminfo

set hlsearch            " Highlight all search results
set smartcase           " Enable smart-case search
set ignorecase          " Always case-insensitive
set incsearch           " Searches for strings incrementally
set magic               " Magic shit, regex

set autoindent          " Auto-indent new lines
set cindent             " Use 'C' style program indenting
set expandtab           " Use spaces instead of tabs
set shiftwidth=4        " Number of auto-indent spaces
set smartindent         " Enable smart-indent
set smarttab            " Enable smart-tabs
set softtabstop=4       " Number of spaces per Tab

"" Advanced
set autoread            " Auto Reads a file upon change
set ruler               " Show row and column ruler information
set hidden              " Show hidden files in NerdTree and :e
set autowriteall        " Auto-write all file changes

set undolevels=1000     " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
set mouse=a

set wildchar=<Tab>
set wildmode=longest,list
" make tab completion for files/buffers act like bash
set wildmenu
let mapleader=","

set scrolloff=20
set showcmd             " display incomplete commands
set cmdheight=2
set hid                 " Abandoned buffers become hidden

set guioptions-=m       "menu bar
set guioptions-=T       "toolbar
set guioptions-=r       "scrollbar

set lazyredraw          " Don't redraw while executing macros

syntax on
filetype off            " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" My bundles here:
"
" original repos on GitHub

Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'

Bundle 'twerth/ir_black'
Bundle 'nanotech/jellybeans.vim'

Bundle 'editorconfig/editorconfig-vim'
Bundle 'scrooloose/nerdtree'
Bundle 'airblade/vim-gitgutter'
Bundle 'gorodinskiy/vim-coloresque'
Bundle 'elixir-lang/vim-elixir'
Bundle 'tpope/vim-eunuch'
Bundle 'scrooloose/syntastic'
Bundle 'majutsushi/tagbar'
Bundle 'junegunn/goyo.vim'
" Bundle 'nsf/gocode', {'rtp': 'vim/'}
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'fatih/vim-go'
Bundle 'Shougo/unite.vim'


" Go Native Plugin
set runtimepath+=$GOROOT/misc/vim

filetype plugin indent on     " required!

colorscheme jellybeans

set cursorline
set cursorcolumn
" highlight cursorline cterm=none ctermfg=none ctermbg=black
" highlight cursorcolumn cterm=none ctermfg=none ctermbg=black
highlight statusline cterm=none ctermfg=white ctermbg=black
" highlight signcolumn cterm=none ctermfg=grey ctermbg=black
" highlight colorcolumn cterm=none ctermfg=none ctermbg=black

set laststatus=2
set statusline=\ %f%m%r%h%w\ %{fugitive#statusline()}\ %=%({%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y}%)\ %([%l,%v][%p%%]\ %)

au InsertLeave * highlight StatusLine cterm=bold ctermfg=white ctermbg=black
au InsertEnter * highlight StatusLine cterm=bold ctermfg=white ctermbg=darkred

autocmd BufWritePre * :%s/\s\+$//e

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
    let l:modeline = printf("vim: set ft=%s ts=%d sw=%d tw=%d %set :",
                \ &filetype, &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

function! BufSel(pattern)
    let bufcount = bufnr("$")
    let currbufnr = 1
    let nummatches = 0
    let firstmatchingbufnr = 0
    while currbufnr <= bufcount
        if(bufexists(currbufnr))
            let currbufname = bufname(currbufnr)
            if(match(currbufname, a:pattern) > -1)
                echo currbufnr . ": ". bufname(currbufnr)
                let nummatches += 1
                let firstmatchingbufnr = currbufnr
            endif
        endif
        let currbufnr = currbufnr + 1
    endwhile
    if(nummatches == 1)
        execute ":buffer ". firstmatchingbufnr
    elseif(nummatches > 1)
        let desiredbufnr = input("Enter buffer number: ")
        if(strlen(desiredbufnr) != 0)
            execute ":buffer ". desiredbufnr
        endif
    else
        echo "No matching buffers"
    endif
endfunction

"Bind the BufSel() function to a user-command
command! -nargs=1 Bs :call BufSel("<args>")

" Vim Bindings
nnoremap <leader>b :buffers<CR>:buffer<Space>
nmap <leader>w :w!<cr>
map <leader>ss :setlocal spell!<cr>
map <leader>/ :noh<cr>

nnoremap <silent> <C-Right> <c-w>l
nnoremap <silent> <C-Left> <c-w>h
nnoremap <silent> <C-Up> <c-w>k
nnoremap <silent> <C-Down> <c-w>j


" Plugin bindings and functionality

" Tagbar
nmap <F8> :TagbarToggle<CR>

" NerdTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
map <C-n> :NERDTreeToggle<CR>i
nmap <space> zz

" Syntastic
let g:syntastic_php_checkers = ['php', 'phpcs']
let g:syntastic_check_on_open=1
let g:syntastic_always_populate_loc_list=1

" PHPUnit
com! -nargs=* Phpunit make -c app <q-args> | cw

" Goyo
nnoremap <Leader><Space> :Goyo<CR>

" gist-vim
let g:gist_post_private = 1
let g:gist_open_browser_after_post = 1
let g:gist_show_privates = 1
let g:gist_get_multiplefile = 1
nnoremap <silent> <Leader>g :Gist<CR>

" Vim-go
let g:go_bin_path = expand("~/.go/bin")

" Unite PT
nnoremap <silent> ,g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_encoding = 'utf-8'
endif


"vim: set ft=vim ts=8 sw=4 tw=100 et :
