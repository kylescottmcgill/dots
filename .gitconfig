[core]
	quotepath = false
	editor = nvim
	whitespace = trailing-space,space-before-tab,indent-with-non-tab
	autocrlf = false
	eol = lf
	filemode = false
[color]
	filemode = false
	diff = auto
	status = auto
	branch = auto
	pager = true
	ui = true
[user]
	email = email@kylescottmcgill.com
	name = Kyle Scott Mcgill
	signingkey = 32C9083E7691D6D7
[github]
	user = kylescottmcgill
[format]
	pretty = oneline
[log]
	abbrevCommit = true
	decorate = true
[help]
	autocorrect = 10
[push]
	default = current
[merge]
	renormalize = true
	renamelimit = 4170
[difftool]
	prompt = false
[mergetool]
	prompt = false
[alias]
	accept-ours = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --ours -- $files; git add -u $files; }; f"
	accept-theirs = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --theirs -- $files; git add -u $files; }; f"
	todo = grep --heading --break --ignore-case -e '@todo *'
	issues = !ghi
	changelog = "!git log $@ --pretty=\"* %s%n+%n--%n%b--%n\" | asciidoctor -o changelog.html -; #"
	browse = !hub browse
	restore = "!git checkout $(git rev-list -n 1 HEAD -- \"$1\")^ -- \"$1\""
	# show all branches, even across remotes
	branches = branch -a --color -v
	logf = log --pretty=full

	# Get short SHA-1 for object
	hash = rev-parse --short HEAD

	# Show the log with stats, but without merges
	lc = log ORIG_HEAD.. --stat --no-merges

	# See a tree graph of your git history
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	# List files known to Git
	ls = ls-files

	# Show the branches I've been working on and when they were created
	mybranches = "!f() { if test $# = 0 ; then set -- refs/remotes ; fi ; git for-each-ref --format='%(authordate:relative)\t%(refname:short)\t%(authoremail)' --sort=authordate \"$@\" | sed -ne \"s/\t<$(git config user.email)>//p\" | column -s '\t' -t ; } ; f"

	# update all submodules in a project
	subs = submodule foreach git pull origin master

	# Pull all branches from the remote that can be merged with fast-forward
	up = "!git remote update -p; git merge --ff-only @{u}"

	# Open all modified files in my editor
	wip = "!$EDITOR $(git ls-files -m)"
[filter "lfs"]
	clean = git lfs clean %f
	smudge = git lfs smudge %f
	required = true

[url "git@github.com:"]
	insteadOf = https://github.com/
[url "git@bitbucket.org:"]
	insteadOf = https://bitbucket.org/
[commit]
	cleanup = strip
	gpgsign = true
	template = /home/kyle/.gitmessage
[http "https://gopkg.in"]
	followRedirects = true
